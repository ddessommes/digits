#CLUSTERING WITH SAMPLES OF 5000 AND CHANGING # OF CENTERS FROM 10 TO 20 BY 2
sample_kms <- scaled_features[sample(1:nrow(scaled_features), 5000),]
d_sample_kms <- dist(sample_kms)
kms10 <- kmeans(sample_kms, centers = 10, nstart = 5)
kms12 <- kmeans(sample_kms, centers = 12, nstart = 5)
kms14 <- kmeans(sample_kms, centers = 14, nstart = 5)
kms16 <- kmeans(sample_kms, centers = 16, nstart = 5)
kms18 <- kmeans(sample_kms, centers = 18, nstart = 5)
kms20 <- kmeans(sample_kms, centers = 20, nstart = 5)

> str(kms10)
List of 9
 $ cluster     : int [1:5000] 10 7 10 4 9 7 4 2 1 10 ...
 $ centers     : num [1:10, 1:20] 0.682 -0.143 1.168 0.989 -0.829 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:10] "1" "2" "3" "4" ...
  .. ..$ : chr [1:20] "pixelSUM_ALL" "pixelSUM_H1" "pixelSUM_H2" "pixelSUM_Q1" ...
 $ totss       : num 99328
 $ withinss    : num [1:10] 2218 3876 2554 3325 1484 ...
 $ tot.withinss: num 25192
 $ betweenss   : num 74136
 $ size        : int [1:10] 424 740 328 596 453 477 629 217 737 399
 $ iter        : int 7
 $ ifault      : int 0
 - attr(*, "class")= chr "kmeans"
> str(kms12)
List of 9
 $ cluster     : int [1:5000] 9 10 9 11 6 10 11 7 8 3 ...
 $ centers     : num [1:12, 1:20] -0.819 1.172 0.279 0.351 -0.225 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:12] "1" "2" "3" "4" ...
  .. ..$ : chr [1:20] "pixelSUM_ALL" "pixelSUM_H1" "pixelSUM_H2" "pixelSUM_Q1" ...
 $ totss       : num 99328
 $ withinss    : num [1:12] 1506 2494 1328 1744 2736 ...
 $ tot.withinss: num 22950
 $ betweenss   : num 76378
 $ size        : int [1:12] 459 324 314 345 467 648 436 392 474 596 ...
 $ iter        : int 8
 $ ifault      : int 0
 - attr(*, "class")= chr "kmeans"
> str(kms14)
List of 9
 $ cluster     : int [1:5000] 11 10 10 1 2 3 1 5 8 14 ...
 $ centers     : num [1:14, 1:20] 1.401 -1.379 -0.786 2.772 -0.571 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:14] "1" "2" "3" "4" ...
  .. ..$ : chr [1:20] "pixelSUM_ALL" "pixelSUM_H1" "pixelSUM_H2" "pixelSUM_Q1" ...
 $ totss       : num 99328
 $ withinss    : num [1:14] 1965 1457 1402 734 1822 ...
 $ tot.withinss: num 21039
 $ betweenss   : num 78289
 $ size        : int [1:14] 376 612 367 86 453 366 230 306 270 447 ...
 $ iter        : int 10
 $ ifault      : int 0
 - attr(*, "class")= chr "kmeans"
> str(kms16)
List of 9
 $ cluster     : int [1:5000] 11 15 14 16 4 6 16 15 10 3 ...
 $ centers     : num [1:16, 1:20] 0.379 -0.585 0.164 -1.385 0.43 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:16] "1" "2" "3" "4" ...
  .. ..$ : chr [1:20] "pixelSUM_ALL" "pixelSUM_H1" "pixelSUM_H2" "pixelSUM_Q1" ...
 $ totss       : num 99328
 $ withinss    : num [1:16] 1093 1252 943 1422 1508 ...
 $ tot.withinss: num 19482
 $ betweenss   : num 79846
 $ size        : int [1:16] 246 265 276 606 324 387 184 428 282 288 ...
 $ iter        : int 7
 $ ifault      : int 0
 - attr(*, "class")= chr "kmeans"
> str(kms18)
List of 9
 $ cluster     : int [1:5000] 9 2 13 6 16 7 6 16 2 11 ...
 $ centers     : num [1:18, 1:20] -1.499 0.3006 1.1995 0.0412 1.388 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:18] "1" "2" "3" "4" ...
  .. ..$ : chr [1:20] "pixelSUM_ALL" "pixelSUM_H1" "pixelSUM_H2" "pixelSUM_Q1" ...
 $ totss       : num 99328
 $ withinss    : num [1:18] 874 993 850 967 883 ...
 $ tot.withinss: num 18293
 $ betweenss   : num 81035
 $ size        : int [1:18] 465 278 172 268 138 360 354 85 351 216 ...
 $ iter        : int 7
 $ ifault      : int 0
 - attr(*, "class")= chr "kmeans"
> str(kms20)
List of 9
 $ cluster     : int [1:5000] 3 16 9 1 16 17 1 16 7 13 ...
 $ centers     : num [1:20, 1:20] 1.443 0.288 0.4 -1.03 1.361 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:20] "1" "2" "3" "4" ...
  .. ..$ : chr [1:20] "pixelSUM_ALL" "pixelSUM_H1" "pixelSUM_H2" "pixelSUM_Q1" ...
 $ totss       : num 99328
 $ withinss    : num [1:20] 975 952 1066 767 949 ...
 $ tot.withinss: num 17296
 $ betweenss   : num 82032
 $ size        : int [1:20] 215 245 373 289 216 224 227 231 340 170 ...
 $ iter        : int 9
 $ ifault      : int 0
 - attr(*, "class")= chr "kmeans"
> 
> kms10$size
 [1] 424 740 328 596 453 477 629 217 737 399
> kms12$size
 [1] 459 324 314 345 467 648 436 392 474 596 401 144
> kms14$size
 [1] 376 612 367  86 453 366 230 306 270 447 445 350 410 282
> kms16$size
 [1] 246 265 276 606 324 387 184 428 282 288 370  88 198 351 410 297
> kms18$size
 [1] 465 278 172 268 138 360 354  85 351 216 260 238 322 262 263 353 236 379
> kms20$size
 [1] 215 245 373 289 216 224 227 231 340 170 160  78 290 255 149 342 341 161 197 497
> 
> 100*(kms10$betweenss / kms10$totss)
[1] 74.63714
> 100*(kms12$betweenss / kms12$totss)
[1] 76.89431
> 100*(kms14$betweenss / kms14$totss)
[1] 78.81833
> 100*(kms16$betweenss / kms16$totss)
[1] 80.38663
> 100*(kms18$betweenss / kms18$totss)
[1] 81.58323
> 100*(kms20$betweenss / kms20$totss)
[1] 82.58714
> 
> 100*(kms10$tot.withinss / kms10$totss)
[1] 25.36286
> 100*(kms12$tot.withinss / kms12$totss)
[1] 23.10569
> 100*(kms14$tot.withinss / kms14$totss)
[1] 21.18167
> 100*(kms16$tot.withinss / kms16$totss)
[1] 19.61337
> 100*(kms18$tot.withinss / kms18$totss)
[1] 18.41677
> 100*(kms20$tot.withinss / kms20$totss)
[1] 17.41286
> fpc::cluster.stats(d_sample_kms, kms10$cluster, aggregateonly = TRUE) 
$n
[1] 5000

$cluster.number
[1] 10

$min.cluster.size
[1] 217

$noisen
[1] 0

$average.between
[1] 6.193

$average.within
[1] 2.859778

$max.diameter
[1] 11.18614

$min.separation
[1] 0.1561057

$ave.within.cluster.ss
[1] 5.038483

$avg.silwidth
[1] 0.2482293

$g2
NULL

$g3
NULL

$pearsongamma
[1] 0.4334681

$dunn
[1] 0.01395528

$dunn2
[1] 0.9800682

$entropy
[1] 2.246872

$wb.ratio
[1] 0.4617759

$ch
[1] 1631.605

$widestgap
[1] 3.153935

$sindex
[1] 0.4784709

$corrected.rand
NULL

$vi
NULL

> fpc::cluster.stats(d_sample_kms, kms12$cluster, aggregateonly = TRUE) 
$n
[1] 5000

$cluster.number
[1] 12

$min.cluster.size
[1] 144

$noisen
[1] 0

$average.between
[1] 6.136189

$average.within
[1] 2.706785

$max.diameter
[1] 9.824027

$min.separation
[1] 0.1561057

$ave.within.cluster.ss
[1] 4.590083

$avg.silwidth
[1] 0.2417566

$g2
NULL

$g3
NULL

$pearsongamma
[1] 0.4088098

$dunn
[1] 0.0158902

$dunn2
[1] 0.9260353

$entropy
[1] 2.434842

$wb.ratio
[1] 0.4411183

$ch
[1] 1509.069

$widestgap
[1] 2.755726

$sindex
[1] 0.4695036

$corrected.rand
NULL

$vi
NULL

> fpc::cluster.stats(d_sample_kms, kms14$cluster, aggregateonly = TRUE) 
$n
[1] 5000

$cluster.number
[1] 14

$min.cluster.size
[1] 86

$noisen
[1] 0

$average.between
[1] 6.103061

$average.within
[1] 2.586264

$max.diameter
[1] 10.27963

$min.separation
[1] 0.1925931

$ave.within.cluster.ss
[1] 4.207865

$avg.silwidth
[1] 0.2388684

$g2
NULL

$g3
NULL

$pearsongamma
[1] 0.3938709

$dunn
[1] 0.01873542

$dunn2
[1] 0.9337198

$entropy
[1] 2.577008

$wb.ratio
[1] 0.423765

$ch
[1] 1427.171

$widestgap
[1] 3.326422

$sindex
[1] 0.4534527

$corrected.rand
NULL

$vi
NULL

> fpc::cluster.stats(d_sample_kms, kms16$cluster, aggregateonly = TRUE) 
$n
[1] 5000

$cluster.number
[1] 16

$min.cluster.size
[1] 88

$noisen
[1] 0

$average.between
[1] 6.079578

$average.within
[1] 2.471419

$max.diameter
[1] 8.893132

$min.separation
[1] 0.1625929

$ave.within.cluster.ss
[1] 3.896314

$avg.silwidth
[1] 0.2384955

$g2
NULL

$g3
NULL

$pearsongamma
[1] 0.3835264

$dunn
[1] 0.01828298

$dunn2
[1] 0.9113862

$entropy
[1] 2.704335

$wb.ratio
[1] 0.4065116

$ch
[1] 1361.816

$widestgap
[1] 2.755726

$sindex
[1] 0.4500834

$corrected.rand
NULL

$vi
NULL

> fpc::cluster.stats(d_sample_kms, kms18$cluster, aggregateonly = TRUE) 
$n
[1] 5000

$cluster.number
[1] 18

$min.cluster.size
[1] 85

$noisen
[1] 0

$average.between
[1] 6.047339

$average.within
[1] 2.409034

$max.diameter
[1] 10.27963

$min.separation
[1] 0.1161798

$ave.within.cluster.ss
[1] 3.658601

$avg.silwidth
[1] 0.2323556

$g2
NULL

$g3
NULL

$pearsongamma
[1] 0.3617871

$dunn
[1] 0.01130195

$dunn2
[1] 0.8019968

$entropy
[1] 2.833311

$wb.ratio
[1] 0.3983626

$ch
[1] 1298.202

$widestgap
[1] 2.755726

$sindex
[1] 0.4179953

$corrected.rand
NULL

$vi
NULL

> fpc::cluster.stats(d_sample_kms, kms20$cluster, aggregateonly = TRUE)
$n
[1] 5000

$cluster.number
[1] 20

$min.cluster.size
[1] 78

$noisen
[1] 0

$average.between
[1] 6.035172

$average.within
[1] 2.322613

$max.diameter
[1] 8.338658

$min.separation
[1] 0.1733415

$ave.within.cluster.ss
[1] 3.459168

$avg.silwidth
[1] 0.2268342

$g2
NULL

$g3
NULL

$pearsongamma
[1] 0.3561924

$dunn
[1] 0.02078769

$dunn2
[1] 0.8665686

$entropy
[1] 2.927359

$wb.ratio
[1] 0.3848463

$ch
[1] 1243.135

$widestgap
[1] 2.755726

$sindex
[1] 0.4274935

$corrected.rand
NULL

$vi
NULL

> #CLUSTER OPTIMIZATION
> #Total Within Sum of Squares (WSS) - Cohesion
> ks <- 10:30
> WSS <- sapply(ks, FUN=function(k) {
+   kmeans(scaled_features, centers=k, nstart=5)$tot.withinss
+ })
There were 47 warnings (use warnings() to see them)
> plot(ks, WSS, type="l")
> 
> ks2 <- seq(from = 10, to = 40, by = 2)
> WSS2 <- sapply(ks2, FUN=function(k) {
+   kmeans(scaled_features[sample(1:nrow(scaled_features), 5000),], 
+          centers=k, nstart=5)$tot.withinss
+ })
There were 12 warnings (use warnings() to see them)
> plot(ks2, WSS2, type="l")
> 
> #Average Silhouette Width (ASW) - Cohesion and Separation
> ASW <- sapply(ks, FUN=function(k) {
+   fpc::cluster.stats(d_sample_cviz, kmeans(sample_cviz,
+                                            centers=k,
+                                            nstart=5)$cluster)$avg.silwidth
+ })
> plot(ks, ASW, type="l")
> 
> ks[which.max(ASW)]
[1] 10
> abline(v=c(10, 13, 18, 22), col="red", lty=2)

[1] 10
